name: 'Terraform-Development'

on:
  push: # TODO: remove - for testing only
    branches:
      - master
  pull_request:

jobs:
  terraform:
    name: 'Terraform-module-test'
    runs-on: ubuntu-latest
    # strategy:
    #   fail-fast: false
    #   matrix:
    #     path:
    #       - test-a
    #       - test-b
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_MODULE_DEVELOPMENT }}
        run: |
          mkdir ./tmp
          cp ../../*.tf ./tmp
          echo "-- ./tmp --"
          ls -al ./tmp

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: us-east-1
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Terraform Init
        id: init
        working-directory: ./tests/test-a
        run: terraform init -input=false

      - name: Terraform Plan
        id: plan
        continue-on-error: true
        working-directory: ./tests/test-a
        run: terraform plan -no-color -input=false
        # if: github.event_name == 'pull_request'
        # run: terraform plan -no-color -input=false
        # run: |
        #   cd tests/${{ matrix.path }}
        #   terraform plan -input=false -no-color

      # - uses: actions/github-script@v6
      #   if: github.event_name == 'pull_request'
      #   env:
      #     PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      #   with:
      #     github-token: ${{ secrets.TF_MODULE_DEVELOPMENT }}
      #     script: |
      #       const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
      #       #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
      #       #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
      #       #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

      #       <details><summary>Show Plan</summary>

      #       \`\`\`\n
      #       ${process.env.PLAN}
      #       \`\`\`

      #       </details>

      #       *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

      #       github.rest.issues.createComment({
      #         issue_number: context.issue.number,
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         body: output
      #       })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
